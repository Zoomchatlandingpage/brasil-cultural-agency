// ðŸ‘¥ LEADS & CRM - FRONTEND IMPLEMENTATION

// client/src/pages/admin-leads-crm.tsx
import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { 
  Users, 
  TrendingUp, 
  MessageSquare, 
  Phone, 
  Mail, 
  DollarSign,
  Clock,
  Target,
  Flame,
  Plus,
  Edit,
  Archive,
  Star,
  Calendar
} from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface Lead {
  id: number;
  userId?: number;
  user?: {
    email: string;
    username: string;
  };
  profileType?: string;
  estimatedBudget?: string;
  travelDates?: string;
  status?: string;
  interestLevel?: string;
  recommendedDestinations?: string;
  createdAt: string;
  scoring?: {
    totalScore: number;
    scoreCategory: string;
    budgetScore: number;
    timelineScore: number;
    engagementScore: number;
    profileMatchScore: number;
  };
  recentActivities?: Activity[];
  notes?: Note[];
  lastActivity?: Activity;
}

interface Activity {
  id: number;
  activityType: string;
  description: string;
  performedBy: string;
  createdAt: string;
}

interface Note {
  id: number;
  noteText: string;
  isPrivate: boolean;
  isPinned: boolean;
  createdBy: string;
  createdAt: string;
}

interface Pipeline {
  new: Lead[];
  qualified: Lead[];
  engaged: Lead[];
  proposal: Lead[];
  closed_won: Lead[];
  closed_lost: Lead[];
}

export default function LeadsCRM() {
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);
  const [newNote, setNewNote] = useState("");
  const [newActivity, setNewActivity] = useState({
    activityType: "note",
    description: "",
  });
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Queries
  const { data: hotLeads, isLoading: hotLeadsLoading } = useQuery({
    queryKey: ["/api/admin/hot-leads"],
    refetchInterval: 30000, // Refresh every 30 seconds
  });

  const { data: pipeline, isLoading: pipelineLoading } = useQuery({
    queryKey: ["/api/admin/leads-pipeline"],
    refetchInterval: 60000, // Refresh every minute
  });

  // Mutations
  const addNoteMutation = useMutation({
    mutationFn: async ({ leadId, note }: { leadId: number; note: string }) => {
      const response = await apiRequest("POST", `/api/admin/leads/${leadId}/notes`, {
        noteText: note,
        isPrivate: false,
        isPinned: false,
      });
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/hot-leads"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/leads-pipeline"] });
      setNewNote("");
      toast({
        title: "Note Added",
        description: "Lead note saved successfully!",
      });
    },
  });

  const addActivityMutation = useMutation({
    mutationFn: async ({ leadId, activity }: { leadId: number; activity: any }) => {
      const response = await apiRequest("POST", `/api/admin/leads/${leadId}/activities`, activity);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/hot-leads"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/leads-pipeline"] });
      setNewActivity({ activityType: "note", description: "" });
      toast({
        title: "Activity Logged",
        description: "Lead activity recorded successfully!",
      });
    },
  });

  const updateStatusMutation = useMutation({
    mutationFn: async ({ leadId, status }: { leadId: number; status: string }) => {
      const response = await apiRequest("PUT", `/api/admin/leads/${leadId}/status`, { status });
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/hot-leads"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/leads-pipeline"] });
      toast({
        title: "Status Updated",
        description: "Lead status changed successfully!",
      });
    },
  });

  const getScoreColor = (score: number) => {
    if (score >= 90) return "text-red-600 bg-red-100";
    if (score >= 70) return "text-orange-600 bg-orange-100";
    if (score >= 50) return "text-yellow-600 bg-yellow-100";
    if (score >= 30) return "text-blue-600 bg-blue-100";
    return "text-gray-600 bg-gray-100";
  };

  const getScoreIcon = (score: number) => {
    if (score >= 90) return <Flame className="h-4 w-4" />;
    if (score >= 70) return <TrendingUp className="h-4 w-4" />;
    if (score >= 50) return <Target className="h-4 w-4" />;
    return <Clock className="h-4 w-4" />;
  };

  const formatCurrency = (amount: string | undefined) => {
    if (!amount) return "$0";
    return `$${parseFloat(amount).toLocaleString()}`;
  };

  const formatTimeAgo = (date: string) => {
    const now = new Date().getTime();
    const past = new Date(date).getTime();
    const diffMinutes = Math.floor((now - past) / (1000 * 60));
    
    if (diffMinutes < 60) return `${diffMinutes}m ago`;
    if (diffMinutes < 1440) return `${Math.floor(diffMinutes / 60)}h ago`;
    return `${Math.floor(diffMinutes / 1440)}d ago`;
  };

  if (hotLeadsLoading || pipelineLoading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <Users className="mx-auto h-12 w-12 animate-pulse text-amazon" />
          <p className="mt-4 text-lg">Loading CRM...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Users className="h-8 w-8 text-amazon" />
            <div>
              <h1 className="text-3xl font-bold text-gray-800">Leads & CRM</h1>
              <p className="text-gray-600">Convert leads into happy travelers</p>
            </div>
          </div>
          <div className="flex space-x-3">
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              Add Lead
            </Button>
            <Button variant="outline">
              <Mail className="h-4 w-4 mr-2" />
              Bulk Email
            </Button>
          </div>
        </div>
      </div>

      <Tabs defaultValue="hot-leads" className="space-y-8">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="hot-leads">Hot Leads</TabsTrigger>
          <TabsTrigger value="pipeline">Pipeline</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        {/* Hot Leads Tab */}
        <TabsContent value="hot-leads" className="space-y-6">
          {/* Quick Stats */}
          <div className="grid md:grid-cols-4 gap-6">
            <Card className="bg-gradient-to-br from-red-500 to-red-600 text-white">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm opacity-80">Hot Leads</p>
                    <p className="text-3xl font-bold">
                      {hotLeads?.filter((l: Lead) => l.scoring?.scoreCategory === "hot").length || 0}
                    </p>
                  </div>
                  <Flame className="h-8 w-8 opacity-80" />
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-orange-500 to-orange-600 text-white">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm opacity-80">Warm Leads</p>
                    <p className="text-3xl font-bold">
                      {hotLeads?.filter((l: Lead) => l.scoring?.scoreCategory === "warm").length || 0}
                    </p>
                  </div>
                  <TrendingUp className="h-8 w-8 opacity-80" />
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-amazon to-green-600 text-white">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm opacity-80">Total Value</p>
                    <p className="text-3xl font-bold">
                      {formatCurrency(
                        hotLeads?.reduce((sum: number, lead: Lead) => 
                          sum + parseFloat(lead.estimatedBudget || "0"), 0
                        ).toString()
                      )}
                    </p>
                  </div>
                  <DollarSign className="h-8 w-8 opacity-80" />
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-blue-500 to-blue-600 text-white">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm opacity-80">Response Rate</p>
                    <p className="text-3xl font-bold">89%</p>
                  </div>
                  <MessageSquare className="h-8 w-8 opacity-80" />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Hot Leads List */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Flame className="h-5 w-5 text-red-500" />
                <span>Leads Needing Immediate Attention</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {hotLeads?.map((lead: Lead) => (
                <div
                  key={lead.id}
                  className="border rounded-lg p-6 hover:shadow-md transition-shadow cursor-pointer"
                  onClick={() => setSelectedLead(lead)}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <h3 className="font-semibold text-lg">
                          {lead.user?.username || `Lead #${lead.id}`}
                        </h3>
                        {lead.scoring && (
                          <Badge className={getScoreColor(lead.scoring.totalScore)}>
                            {getScoreIcon(lead.scoring.totalScore)}
                            <span className="ml-1">{lead.scoring.totalScore}/100</span>
                          </Badge>
                        )}
                        {lead.profileType && (
                          <Badge variant="outline">{lead.profileType}</Badge>
                        )}
                      </div>
                      
                      <div className="grid md:grid-cols-3 gap-4 text-sm text-gray-600">
                        <div>
                          <span className="font-medium">Email:</span> {lead.user?.email || "Not provided"}
                        </div>
                        <div>
                          <span className="font-medium">Budget:</span> {formatCurrency(lead.estimatedBudget)}
                        </div>
                        <div>
                          <span className="font-medium">Travel Date:</span> {lead.travelDates || "Flexible"}
                        </div>
                      </div>

                      {lead.lastActivity && (
                        <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                          <p className="text-sm">
                            <span className="font-medium">Last Activity:</span> {lead.lastActivity.description}
                          </p>
                          <p className="text-xs text-gray-500 mt-1">
                            {formatTimeAgo(lead.lastActivity.createdAt)} by {lead.lastActivity.performedBy}
                          </p>
                        </div>
                      )}
                    </div>

                    <div className="flex space-x-2 ml-4">
                      <Button size="sm" variant="outline">
                        <Phone className="h-4 w-4" />
                      </Button>
                      <Button size="sm" variant="outline">
                        <Mail className="h-4 w-4" />
                      </Button>
                      <Button size="sm" variant="outline">
                        <MessageSquare className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  {/* Quick Actions */}
                  <div className="flex items-center justify-between mt-4 pt-4 border-t">
                    <div className="flex space-x-2">
                      {lead.recommendedDestinations && (
                        <Badge variant="secondary" className="text-xs">
                          Interested in: {lead.recommendedDestinations}
                        </Badge>
                      )}
                      {lead.interestLevel && (
                        <Badge variant="secondary" className="text-xs">
                          {lead.interestLevel} Interest
                        </Badge>
                      )}
                    </div>
                    <div className="flex space-x-2">
                      <Button size="sm" className="bg-amazon text-white">
                        Send Quote
                      </Button>
                      <Button size="sm" variant="outline">
                        Schedule Call
                      </Button>
                    </div>
                  </div>
                </div>
              ))}

              {(!hotLeads || hotLeads.length === 0) && (
                <div className="text-center py-8 text-gray-500">
                  <Users className="mx-auto h-12 w-12 mb-4 text-gray-300" />
                  <p>No hot leads at the moment.</p>
                  <p className="text-sm">Check back later or review your pipeline.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Pipeline Tab */}
        <TabsContent value="pipeline" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-5 gap-6 min-h-[600px]">
            {pipeline && Object.entries(pipeline).map(([stage, leads]) => (
              <Card key={stage} className="flex flex-col">
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm font-medium text-gray-600 uppercase tracking-wide">
                    {stage.replace('_', ' ')}
                  </CardTitle>
                  <div className="flex items-center justify-between text-sm">
                    <span>{(leads as Lead[]).length} leads</span>
                    <span>
                      {formatCurrency(
                        (leads as Lead[]).reduce((sum, lead) => 
                          sum + parseFloat(lead.estimatedBudget || "0"), 0
                        ).toString()
                      )}
                    </span>
                  </div>
                </CardHeader>
                <CardContent className="flex-1 space-y-3 pt-0">
                  {(leads as Lead[]).map((lead) => (
                    <div
                      key={lead.id}
                      className="p-3 border rounded-lg bg-white hover:shadow-sm transition-shadow cursor-pointer"
                      onClick={() => setSelectedLead(lead)}
                    >
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium text-sm truncate">
                          {lead.user?.username || `Lead #${lead.id}`}
                        </h4>
                        {lead.scoring && (
                          <Badge variant="secondary" className="text-xs">
                            {lead.scoring.totalScore}
                          </Badge>
                        )}
                      </div>
                      <div className="text-xs text-gray-600 space-y-1">
                        <div>{formatCurrency(lead.estimatedBudget)}</div>
                        <div>{lead.profileType}</div>
                        <div className="text-gray-400">
                          {formatTimeAgo(lead.createdAt)}
                        </div>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics" className="space-y-6">
          <div className="grid md:grid-cols-2 gap-8">
            <Card>
              <CardHeader>
                <CardTitle>Conversion Funnel</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <span>Website Visitors</span>
                    <span className="font-bold">8,234</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                    <span>Started Chat</span>
                    <span className="font-bold">892 (10.8%)</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                    <span>Generated Lead</span>
                    <span className="font-bold">165 (18.5%)</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-orange-50 rounded-lg">
                    <span>Showed Interest</span>
                    <span className="font-bold">89 (53.9%)</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                    <span>Confirmed Booking</span>
                    <span className="font-bold">20 (22.5%)</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Lead Sources</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span>Organic Search</span>
                    <div className="flex items-center space-x-2">
                      <div className="w-24 bg-gray-200 rounded-full h-2">
                        <div className="bg-green-600 h-2 rounded-full w-3/4"></div>
                      </div>
                      <span className="text-sm font-medium">34%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Social Media</span>
                    <div className="flex items-center space-x-2">
                      <div className="w-24 bg-gray-200 rounded-full h-2">
                        <div className="bg-blue-600 h-2 rounded-full w-1/2"></div>
                      </div>
                      <span className="text-sm font-medium">28%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Paid Ads</span>
                    <div className="flex items-center space-x-2">
                      <div className="w-24 bg-gray-200 rounded-full h-2">
                        <div className="bg-purple-600 h-2 rounded-full w-1/3"></div>
                      </div>
                      <span className="text-sm font-medium">22%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Referrals</span>
                    <div className="flex items-center space-x-2">
                      <div className="w-24 bg-gray-200 rounded-full h-2">
                        <div className="bg-orange-600 h-2 rounded-full w-1/4"></div>
                      </div>
                      <span className="text-sm font-medium">16%</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Lead Detail Modal */}
      {selectedLead && (
        <Dialog open={!!selectedLead} onOpenChange={() => setSelectedLead(null)}>
          <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="flex items-center space-x-3">
                <span>{selectedLead.user?.username || `Lead #${selectedLead.id}`}</span>
                {selectedLead.scoring && (
                  <Badge className={getScoreColor(selectedLead.scoring.totalScore)}>
                    {selectedLead.scoring.totalScore}/100
                  </Badge>
                )}
              </DialogTitle>
            </DialogHeader>

            <div className="grid md:grid-cols-2 gap-6">
              {/* Lead Info */}
              <div className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Lead Information</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <span className="font-medium">Email:</span> {selectedLead.user?.email || "Not provided"}
                    </div>
                    <div>
                      <span className="font-medium">Profile:</span> {selectedLead.profileType || "Not detected"}
                    </div>
                    <div>
                      <span className="font-medium">Budget:</span> {formatCurrency(selectedLead.estimatedBudget)}
                    </div>
                    <div>
                      <span className="font-medium">Travel Dates:</span> {selectedLead.travelDates || "Flexible"}
                    </div>
                    <div>
                      <span className="font-medium">Status:</span>
                      <Select
                        value={selectedLead.status || "new"}
                        onValueChange={(value) => {
                          updateStatusMutation.mutate({ leadId: selectedLead.id, status: value });
                        }}
                      >
                        <SelectTrigger className="w-32 ml-2">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="new">New</SelectItem>
                          <SelectItem value="qualified">Qualified</SelectItem>
                          <SelectItem value="engaged">Engaged</SelectItem>
                          <SelectItem value="proposal">Proposal</SelectItem>
                          <SelectItem value="closed_won">Won</SelectItem>
                          <SelectItem value="closed_lost">Lost</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </CardContent>
                </Card>

                {/* Add Note */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Add Note</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <Textarea
                      value={newNote}
                      onChange={(e) => setNewNote(e.target.value)}
                      placeholder="Add a note about this lead..."
                      rows={3}
                    />
                    <Button
                      onClick={() => addNoteMutation.mutate({ leadId: selectedLead.id, note: newNote })}
                      disabled={!newNote.trim() || addNoteMutation.isPending}
                      className="w-full"
                    >
                      Add Note
                    </Button>
                  </CardContent>
                </Card>
              </div>

              {/* Activities & Notes */}
              <div className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Recent Activities</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3 max-h-64 overflow-y-auto">
                    {selectedLead.recentActivities?.map((activity) => (
                      <div key={activity.id} className="border-l-2 border-gray-200 pl-4 pb-3">
                        <div className="flex items-center justify-between">
                          <span className="font-medium text-sm">{activity.activityType}</span>
                          <span className="text-xs text-gray-500">
                            {formatTimeAgo(activity.createdAt)}
                          </span>
                        </div>
                        <p className="text-sm text-gray-600 mt-1">{activity.description}</p>
                        <p className="text-xs text-gray-400">by {activity.performedBy}</p>
                      </div>
                    ))}
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Notes</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3 max-h-64 overflow-y-auto">
                    {selectedLead.notes?.map((note) => (
                      <div key={note.id} className="p-3 bg-gray-50 rounded-lg">
                        <p className="text-sm">{note.noteText}</p>
                        <div className="flex items-center justify-between mt-2 text-xs text-gray-500">
                          <span>by {note.createdBy}</span>
                          <span>{formatTimeAgo(note.createdAt)}</span>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}